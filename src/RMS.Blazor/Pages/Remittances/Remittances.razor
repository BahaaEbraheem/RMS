@page "/remittances"
@using RMS.Blazor
@using Volo.Abp.AspNetCore.Components
@using Volo.Abp.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web
@using Volo.Abp.Application.Dtos
@using RMS.Remittances
@using Microsoft.AspNetCore.Components.Forms
@using RMS.Remittances.Dtos
@using RMS.Customers
@using RMS.Customers.Dtos
@using RMS.Localization
@using Volo.Abp.AspNetCore.Components.Web.BasicTheme.Themes.Basic
@using Volo.Abp.Domain.Entities
@using Blazorise
@using Microsoft.JSInterop
@using static RMS.Enums.Enums;
@using Microsoft.Extensions.Localization
@using Volo.Abp.DependencyInjection
@using Volo.Abp.AspNetCore.Components.Server.BasicTheme.Themes.Basic
@using Volo.Abp.AspNetCore.Components.Server.BasicTheme.Bundling
@inherits RMSComponentBase
@attribute [Dependency(ReplaceServices = true)]

@inject AbpBlazorMessageLocalizerHelper<RMSResource> LH
@inject IStringLocalizer<RMSResource> L

@inject IRemittanceAppService RemittanceAppService
@inject ICustomerAppService CustomerAppService
@inject NavigationManager NavigationManager


@*<style>
    .modal1{
       margin-left: 500px;
       
    }

    .modal2 {
        
       margin-right :500px;
    }
</style>
*@

<Card>
        <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Remittances"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="OpenCreateRemittanceModal">
                    @L["NewRemittance"]
                </Button>
            </Column>
        </Row>
    </CardHeader>

    <CardBody>
        <DataGrid TItem="RemittanceDto"
                  Data="RemittanceList"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
                  
            <DataGridColumns>
                <DataGridColumn Width="150px"
                                TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Id)"
                                Sortable="false"
                                Caption="@L["Actions"]">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                @L["Actions"]
                            </DropdownToggle>
                            <DropdownMenu>
                                 <DropdownItem Clicked="() => OpenEditRemittanceModal(context)">
                                        @L["Edit"]
                                    </DropdownItem>


                                <DropdownItem Clicked="() => DeleteRemittanceAsync(context)">
                                        @L["Delete"]
                                    </DropdownItem>
                                    @if (@L[$"Enum:Remittance_Status:{(int)context.State}"]=="Draft")
                                {
                                    <DropdownItem Clicked="() =>UpdateRemittanceToReadyAsync(context)">
                                        @L["Ready"]
                                    </DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.Amount)"
                                Caption="@L["Amount"]"></DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.ReceiverFullName)"
                                Caption="@L["ReceiverFullName"]"></DataGridColumn>
                <DataGridColumn TItem="RemittanceDto"
                Field="@nameof(RemittanceDto.CurrencyName)"
                                Caption="@L["Currency"]"></DataGridColumn>

                             @*      <DataGridColumn TItem="RemittanceDto"
             Field="@nameof(RemittanceDto.CreatrorName)"
                                Caption="@L["CreatrorName"]"></DataGridColumn>
*@
                <DataGridColumn TItem="RemittanceDto"
                                Field="@nameof(RemittanceDto.CreationTime)"
                                Caption="@L["CreationTime"]">
    <DisplayTemplate>
                        @context.CreationTime.ToString()
                    </DisplayTemplate>
                </DataGridColumn>
                

                   <DataGridColumn TItem="RemittanceDto"
                Field="@nameof(RemittanceDto.State)"
                                Caption="@L["State"]">
                                <DisplayTemplate>
              
                        @L[$"Enum:Remittance_Status:{(int)context.State}"]
                    </DisplayTemplate>
                            </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>


<Modal @ref="CreateSearchCustomerModal"  >
                                  
          <ModalHeader>

              <ModalTitle>@L["Customers"]</ModalTitle>
                <CloseButton Clicked="CloseCreateSearchCustomerModal" />
                </ModalHeader>
    <ModalContent>

        <Form>
            
<DataGrid TItem="CustomerDto"
                      Data="CustomerList"
                   Filterable
          FilterMethod="DataGridFilterMethod.StartsWith"
          Responsive
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
        <DataGridColumn Width="150px"
                                TItem="CustomerDto"
                                    Field="@nameof(CustomerDto.Id)"
                                Sortable="false"
                                Caption="@L["Actions"]">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Success">
                                @L["Actions"]
                            </DropdownToggle>
                            <DropdownMenu>
                                    <DropdownItem Clicked="
                         () =>PassCustomer(context,NewRemittance.Amount,
                       NewRemittance.ReceiverFullName,NewRemittance.CurrencyId,
                          NewRemittance.Type)">
                                        @L["Pass"]
                                    </DropdownItem>


                             
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="CustomerDto"
                                Field="@nameof(CustomerDto.FirstName)"
                                Caption="@L["FirstName"]"></DataGridColumn>
                <DataGridColumn TItem="CustomerDto"
                                Field="@nameof(CustomerDto.LastName)"
                                Caption="@L["LastName"]">

                </DataGridColumn>
                <DataGridColumn TItem="CustomerDto"
                                Field="@nameof(CustomerDto.FatherName)"
                                Caption="@L["FatherName"]">

                </DataGridColumn>
                <DataGridColumn TItem="CustomerDto"
                                Field="@nameof(CustomerDto.MotherName)"
                                Caption="@L["MotherName"]">

</DataGridColumn>
</DataGridColumns>
</DataGrid>

    <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateSearchCustomerModal">
                    @L["Cancel"]
                </Button>

            </ModalFooter>
          </Form>
    </ModalContent>

</Modal>
   

















<Modal @ref="CreateRemittanceModal" >
    <ModalContent >
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewRemittance"]</ModalTitle>
                <CloseButton Clicked="CloseCreateRemittanceModal" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewRemittance" ValidateOnLoad="false">




                       <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Amount"]</FieldLabel>
                            <NumericEdit  TValue="double" @bind-Value="@NewRemittance.Amount">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </NumericEdit>
                        </Field>
                    </Validation>
                       <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["SenderBy"]</FieldLabel>
                            <TextEdit Text="@NewRemittance.SenderName" ReadOnly />
                        <Button Color="Color.Primary" Clicked="OpenCreateSearchCustomerModal">.....</Button>
                       </Field>
                    </Validation>
                       <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Type"]</FieldLabel>
                            <Select TValue="RemittanceType" @bind-SelectedValue="@NewRemittance.Type">

                                @foreach (int RemittanceTypeValue in Enum.GetValues(typeof(RemittanceType)))
                                {
                                    <SelectItem TValue="RemittanceType" Value="@((RemittanceType) RemittanceTypeValue)">
                                        @L[$"Enum:RemittanceType:{RemittanceTypeValue}"]
                                    </SelectItem>
                                }
                            </Select>
                        </Field>
                    </Validation>
                       <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Currency"]</FieldLabel>
                            <Select TValue="Guid" @bind-SelectedValue="@NewRemittance.CurrencyId">
                                <SelectItem TValue="Guid" Value="Guid.Empty">@L["PickAnCurrency"]</SelectItem>
                               
                                    @if (NewRemittance.Type == RemittanceType.Internal)
                                    {
                                    <SelectItem TValue="Guid" Value="@currencyList.FirstOrDefault(a=>a.Name=="Syria Pound").Id">
                                            @currencyList.FirstOrDefault(a=>a.Name=="Syria Pound").Name
                                        </SelectItem>
                                    }
                                    else
                                    {
                                           @foreach (var currency in currencyList.Where(a=>a.Name!="Syria Pound"))
                                           {
                                        <SelectItem TValue="Guid" Value="@currency.Id">
                                            @currency.Name
                                        </SelectItem>
                                           }

                                    }
                               
                                
                            </Select>
                        </Field>

                    </Validation>
                       <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["ReceiverFullName"]</FieldLabel>
                            <TextEdit @bind-Text="@NewRemittance.ReceiverFullName">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                 

                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateRemittanceModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateRemittanceAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="EditRemittanceModal">
  <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["SerialNumber"]:@EditingRemittance.SerialNumber</ModalTitle>
                        <CloseButton Clicked="CloseEditRemittanceModal" />
                    </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@EditingRemittance" ValidateOnLoad="false">

                        <Field>
                            <FieldLabel>@L["Amount"]</FieldLabel>
                            <InputNumber TValue="double" @bind-Value="@EditingRemittance.Amount" />
                        </Field>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Currency"]</FieldLabel>
                            <Select TValue="Guid" @bind-SelectedValue="@EditingRemittance.CurrencyId">
                                <SelectItem TValue="Guid" Value="Guid.Empty">@L["PickAnCurrency"]</SelectItem>
                                @foreach (var currency in currencyList)
                                {
                                    <SelectItem TValue="Guid" Value="@currency.Id">
                                        @currency.Name
                                    </SelectItem>
                                }
                            </Select>
                        </Field>

                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Type"]</FieldLabel>
                            <Select TValue="RemittanceType" @bind-SelectedValue="@EditingRemittance.Type">
                                @foreach (int RemittanceTypeValue in Enum.GetValues(typeof(RemittanceType)))
                                {
                                    <SelectItem TValue="RemittanceType" Value="@((RemittanceType) RemittanceTypeValue)">
                                        @L[$"Enum:RemittanceType:{RemittanceTypeValue}"]
                                    </SelectItem>
                                }
                            </Select>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["ReceiverFullName"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingRemittance.ReceiverFullName">
                             
                            </TextEdit>
                        </Field>
                    </Validation>

                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditRemittanceModal">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateRemittanceAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
